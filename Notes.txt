Identifying the components:
Build everything in isolation and then put it all together

Color Palette:
Primary Color
Secondary Color 
Color Accent
Check the design in photoshop and see what colors are used. In our case:
Primary Color: Darker blue
Secondary Color: Lighter blue
Color Accent: Accent
We are gonna use variables so we can use them in different places
Check the colors for elements, buttons, etc, and defeine them as variables

Typography:
Check the font sizes in the photoshop design.
Look for the fonts on fonts.google.com and see the styles we need (bold, italic)
Get the links for the fonts and add them to the html markup.
Then define them in the body tag
h$ will add different h tags
{Heading$} the value of the dollar sign will be changed
h${Heading$}*3
To summarize, check the font sizes, line height and margins of the headings with the text and set the rules for the headings and the body (body will apply on the paragraphs directly)
Check for margin collapsing: the margin below the heading and the margin above the paragraph are collapsed on 24px
Set the margin-top of the paragraph to 0 so the only margin that applies is the header.
line-height DOES NOT HAVE UNITS!!!!!!!!!!!!

Links:
Use bigger fonts for mobile than for PC. More readable and easier to touch.

Define a media query for each section that we change.
Create a folder for each of the elements that we create. Copy just the element.

Badges:
Different colored badges -> Object oriented CSS. Separate structure from skin
One class for the basic structure for padding and font sizes. Another for setting the different colors.
.badge
.badge--primary
.badge--small
Set the classes of the element to the combination of the previous classes.
white-space: nowrap; Whatever is in a badge will not go into a new line, will keep in the same line

Lists:
Inline lists (horizontal)
Vertical lists
Add the ticks as an svg

Icons:
fill  to change the color of an svg

Buttons:
Nothing to see here.

Inputs:
Basic input and then combine it with a button.

Input groups:
Combine input with a button.
It is not an input! It is a div with 2 elements, and input and the button.
The borders are from the div!
Nest properties, .input-group .input{}

Cards:
We let it be a block element, we will put it on a container and will take all the space of the container
When adding the padding on the card__header and __body, it overflows. Set the overflow on the parent.

Plans:
Card with button, and lists

Popular badge:
Add a class on the header plan--popular, instead of styling an image and adding it each time we need it
Add it before the card header
.plan--popular .card__header::before {
  content: url(../images/popular.svg);
  width: 40px;
  display: inline-block;
  position: absolute;
  top: -6px;
  right: 5%;
}

Media objects:
Icon/picture, title and text

Quote:
<q></q> inline element 
<blockqueote></blockqueote> block level element

Grids:
2 column grid
grid--1x2 1 row 2 columns

Testimonial: 2 column grid

Collapsibles:
Will have 2 parts. A header and a body. When we click on its heading the body appears or collapses.
Icon for the arrow on the right of the text
Javascript to toggle the aplication of a class in the conatainer.

Blocks:
Check for margins of the Heading
Some of the blocks are skewed to the right or to the left. Solved by clipping images
clip-path generator
clip-path: polygon(0 0, 100% 0%, 100% 100%, 0 86%);
On the skewed blocks, the padding on the bottom is lost, we have to apply an extra padding on skewed blocks
Variables can only be created on a particular element and not just the root.
The content should all be inside a certain width (check with photoshop, add extras, then ctrl+h, and measure the distance the text takes)
.container {
  max-width: 1140px;
}
this class can be used anywhere.
Cannot be used on a dark block, it will constrain the width of the block, we want to constrain the content of the block
margin: 0 auto;
margin: 0 auto; makes the horizontal margin to center the text as the screen gets wider

Navigation Bars:
Huge difference in desktop and mobile
3 elements, the icon, the toggler (hidden on desktop), and the list
It is a collapsible component, reuse the existing javascript
Give classes to make the nav bar a collaspsible component
add the collapsible__content to make it appear initially collapsed
.nav.collapsible--expanded selects an element that has both the classes
For desktop we have to hide the togler and not set the width of the list to 100%, we set it to auto, will stretch to fit its content

Hero:
The image is white, and put on a grid, with a black baground, when the screen is smaller it changes to 1 column.

Optimizing images
The image is 1500px wide. We know that the highest width, will be half the size of the screen, 1140. The size should be 570px
Strategy:
Server a 570px wide image and let the browser do the resizing. 570 -> 500.
Pixel density -> For high density screens we have to provide a picture 2 times the size of the picture.
If our picture is 570, the 2x will be 1140.
Change the size of the images with photoshop
Then change the format to webp with cloud converter

Domain Block:
 grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
 auto-fit to automatically fit the columns in the screen, and minmax we define a minimum separation of 100px, to 1 fraction

Plans block:
Desktop, popular larger than the others and when we move to one of them transition to larger


Putting it All Together:
COPY EVERYTHIIIING!

Troubleshooting Layout Issues:
Isolate the problem
We create a new file, call it playground.html for funzies and copy the CSS files and the "bad boy", in our case the domain block
On chrome devtools, delete the elements one by one and see if it fixes the problem

Search Engine Optimization:
Deserves a whole course on its own. Just some tips.
Add a catchy title, meta description.
Open graph protocol. Preview of the website when sharing it. <meta property="og:title" content="Moshify...">

Build for production:
Build tool to combine CSS and Javascript files, to reduce the number of http requests
Optimize images
Tools:
  Webpack
  Rollup
  Parcel
Install node.js
npm init -y
We have a new file called package.json
with information of the project
Install parcel
npm i -D parcel-bundler
Exclude from repository. We can later install the dependencies with npm again if needed, checking package.json
.gitignore and add node_modules/
node_modules/.bin/parcel index.html 
or install parcel globally npm i -g parcel-bundler so it can be used from any folder
parcel index.html
ignore .cache and dist
parcel build --no-minify index.html to build the webpage will all dependencies. This does not minify our files
Turns out you can get around this by configuring htmlnano to not minify SVG.
Add a .htmlnanorc file to your project root, with a JSON configuration object like this:
{
    "minifySvg": false
}
USE WINDOWS TERMINAL, VSCode Terminal does not work for some strange reasons

Pushing to GitHub:
Push to github, and then to deploy we use the repository

Tips:
Define a media query for each section that we change.
Create a folder for each of the elements that we create. Copy just the element.
Variable fonts -> We get one single file for all the styles of the font
BEM Separate items that are inside the other with double underscores
Double underscores for items that should not exist outside the main element.